{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./canvas_grid.js","webpack:///./cell.js","webpack:///./game.js","webpack:///./gol.js","webpack:///./grid.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;AACA;;AAEA;;AAEA;;;;;;;;;;;;AC3DA,aAAa,mBAAO,CAAC,yBAAQ;AAC7B,aAAa,mBAAO,CAAC,4BAAW;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;;;;;;;;;;AChCA,aAAa,mBAAO,CAAC,yBAAQ;AAC7B,aAAa,mBAAO,CAAC,yBAAQ;AAC7B,aAAa,mBAAO,CAAC,yBAAQ;AAC7B,mBAAmB,mBAAO,CAAC,uCAAe;;;;AAI1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;ACvCD,aAAa,mBAAO,CAAC,4BAAW;AAChC;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,qBAAqB,OAAO;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./gol.js\");\n","\nclass CanvasGrid {\n  constructor(canvasEl) {\n    this.canvasEl = canvasEl;\n    this.ctx = this.canvasEl.getContext(\"2d\")\n    this.fillSquare = this.fillSquare.bind(this)\n  }\n\n  buildGrid() {\n    this.canvasEl.width = 1000;\n    this.canvasEl.height = 600;\n\n    // const ctx = this.canvasEl.getContext(\"2d\");\n    this.ctx.fillStyle = \"purple\";\n    this.ctx.fillRect(0, 0, 1000, 600);\n    let cols\n    let rows\n    this.ctx.fillStyle = \"black\";\n    for (var i = 0; i < 100; i++) {\n      for (var j = 0; j < 60; j++) {\n        let x = 1 + ( i * 10 );\n        let y = 1 + ( j * 10 );\n        this.ctx.fillRect(x, y, 8, 8);\n        cols = i;\n      }\n      rows = j;\n    }\n  }\n\n  fillSquare(coords) {\n    console.log(this);\n    console.log(this.ctx);\n    const squareArea = this.convertCoords(coords);\n    this.ctx.fillStyle = 'yellow';\n    this.ctx.fillRect(squareArea[0], squareArea[1], 8, 8);\n  }\n\n  convertCoords(coords) {\n    let x = coords[0];\n    let y = coords[1];\n    let x_loc = 1 + ( x * 10 );\n    let y_loc = 1 + ( y * 10 );\n    return [x_loc, y_loc];\n  }\n\n}\n\nmodule.exports = CanvasGrid\n","\nclass Cell {\n  constructor(a, b, populated=false) {\n    this.coordinates = [a,b]\n    this.populated = populated;\n  }\n\n  is_populated_in_next_generation() {\n    const n = this.number_of_populated_neighbors()\n\n    if (n == 3) {\n      return true;\n    } else if (n == 2 && this.populated) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  number_of_populated_neighbors() {\n    return this.neighbors().reduce((acc, neighbor) => {\n      if (neighbor && neighbor.populated) {\n        return acc + 1;\n      } else {\n        return acc\n      }\n    }, 0);\n  }\n\n  neighbors() {\n    const a = this.coordinates[0]\n    const b = this.coordinates[1]\n    return ([\n      [a, b - 1],\n      [a, b + 1],\n      [a - 1, b],\n      [a + 1, b],\n      [a - 1, b - 1],\n      [a - 1, b + 1],\n      [a + 1, b - 1],\n      [a + 1, b + 1]\n    ]);\n  }\n\n\n\n//  Any live cell with fewer than two live neighbors dies, as if by under population.\n// Any live cell with two or three live neighbors lives on to the next generation.\n// Any live cell with more than three live neighbors dies, as if by overpopulation.\n// Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\n// if the sum of all nine fields in a given\n// neighborhood is three, the inner field state\n// for the next generation will be life; if the all-field sum is four,\n// the inner field retains its current state;\n// and every other sum sets the inner field to death.\n\n}\n\nmodule.exports = Cell;\n","const Grid = require('./grid');\nconst Cell = require('./cell.js');\n\nclass Game {\n  constructor() {\n    // debugger\n    this.current_grid = new Grid();\n    this.next_gen_grid = undefined;\n    this.canvasGrid = 0;\n  }\n\n  play() {\n    [1,2,3,4,5].forEach((i) => {\n      this.step_generation()\n    });\n  }\n\n  step_generation() {\n    this.current_grid = this.next_gen_grid;\n    this.generate_next_gen_grid();\n  }\n\n  generate_next_gen_grid() {\n    // debugger\n    this.next_gen_grid = this.current_grid.generate_next_gen_grid();\n    this.current_grid = new Grid();\n    let okay = 0;\n  }\n\n}\n\n\nmodule.exports = Game;\n","const Grid = require('./grid');\nconst Game = require('./game');\nconst Cell = require('./cell');\nconst CanvasGrid = require('./canvas_grid');\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n// will delete this code\n  let grid_a = new Grid();\n  let grid_b = new Grid();\n  let game = new Game();\n  let new_cell = new Cell();\n\n  // debugger\n  // grid_a.generate_next_gen_grid();\n  // console.log(grid_a.next_gen_grid);\n  // game.step_generation();\n  // console.log(game.next_gen_grid);\n  // will delete this code\n\n  // grab canvas\n  // pass it to canvasGrid class\n  // pass that canvasGrid to new instance of game\n  // call play on the game\n\n  const canvasEl = document.getElementById(\"mycanvas\");\n  let canvasInstance = new CanvasGrid(canvasEl);\n  canvasInstance.buildGrid();\n\n  window.fillSquare = canvasInstance.fillSquare;\n\n  // console.log(cols);\n  // console.log(rows + 4);\n  // console.log(\"test\");\n  //\n  // console.log(grid_a);\n  // console.log(game);\n\n});\n","const Cell = require(\"./cell.js\");\n// import Cell from \"./cell\";\n\n\nclass Grid {\n  constructor(a=60, b=99 ) {\n    this.grid = [];\n    this.grid = this.create_grid(a,b);\n  }\n\n  create_grid(a,b) {\n    let output_grid = [];\n    for (var i = 0; i < a; i++) {\n      let new_row = [];\n      for (var j = 0; j < b; j++) {\n\n        let new_cell = new Cell(i, j, this.should_be_populated(i,j));\n        new_row.push(new_cell);\n      }\n      output_grid.push(new_row);\n    }\n    return output_grid;\n  }\n\n  should_be_populated(n, m) {\n    return false;\n  }\n\n  accept_array(arr) {\n    this.grid = arr;\n  }\n\n  generate_next_gen_grid() {\n    let next_gen_grid = new this.constructor(this.grid.length, this.grid[0].length);\n    let next_gen_arr = this.grid.map((row)=>{\n      return row.map((each_cell=>{\n        let populate = each_cell.is_populated_in_next_generation();\n        let coords = each_cell.coordinates;\n        let next_gen = new Cell(coords[0], coords[1], populate);\n        return next_gen;\n      }));\n    });\n    next_gen_grid.accept_array(next_gen_arr);\n    return next_gen_arr;\n  }\n\n}\n\nmodule.exports = Grid\n"],"sourceRoot":""}